<?xml version="1.0" encoding="UTF-8"?>
<xwikidoc>
<web>FTPCode</web>
<name>AllAttachments</name>
<language></language>
<defaultLanguage></defaultLanguage>
<translation>0</translation>
<parent>Main.WebHome</parent>
<creator>xwiki:XWiki.Admin</creator>
<author>xwiki:XWiki.Admin</author>
<customClass></customClass>
<contentAuthor>xwiki:XWiki.Admin</contentAuthor>
<creationDate>1403886435000</creationDate>
<date>1404131966000</date>
<contentUpdateDate>1404131966000</contentUpdateDate>
<version>1.1</version>
<title>$services.localization.render('platform.index.attachments')</title>
<defaultTemplate></defaultTemplate>
<validationScript></validationScript>
<comment></comment>
<minorEdit>false</minorEdit>
<syntaxId>xwiki/2.0</syntaxId>
<hidden>true</hidden>
<object>
<class>
<name>XWiki.JavaScriptExtension</name>
<customClass></customClass>
<customMapping></customMapping>
<defaultViewSheet></defaultViewSheet>
<defaultEditSheet></defaultEditSheet>
<defaultWeb></defaultWeb>
<nameField></nameField>
<validationScript></validationScript>
<cache>
<cache>0</cache>
<disabled>0</disabled>
<displayType>select</displayType>
<multiSelect>0</multiSelect>
<name>cache</name>
<number>5</number>
<prettyName>Caching policy</prettyName>
<relationalStorage>0</relationalStorage>
<separator> </separator>
<separators> ,|</separators>
<size>1</size>
<unmodifiable>0</unmodifiable>
<values>long|short|default|forbid</values>
<classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
</cache>
<code>
<disabled>0</disabled>
<name>code</name>
<number>2</number>
<prettyName>Code</prettyName>
<rows>20</rows>
<size>50</size>
<unmodifiable>0</unmodifiable>
<classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
</code>
<name>
<disabled>0</disabled>
<name>name</name>
<number>1</number>
<prettyName>Name</prettyName>
<size>30</size>
<unmodifiable>0</unmodifiable>
<classType>com.xpn.xwiki.objects.classes.StringClass</classType>
</name>
<parse>
<disabled>0</disabled>
<displayFormType>select</displayFormType>
<displayType>yesno</displayType>
<name>parse</name>
<number>4</number>
<prettyName>Parse content</prettyName>
<unmodifiable>0</unmodifiable>
<classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
</parse>
<use>
<cache>0</cache>
<disabled>0</disabled>
<displayType>select</displayType>
<multiSelect>0</multiSelect>
<name>use</name>
<number>3</number>
<prettyName>Use this extension</prettyName>
<relationalStorage>0</relationalStorage>
<separator> </separator>
<separators> ,|</separators>
<size>1</size>
<unmodifiable>0</unmodifiable>
<values>currentPage=Always on this page|onDemand=On demand|always=Always on this wiki</values>
<classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
</use>
</class>
<name>FTPCode.AllAttachments</name>
<number>0</number>
<className>XWiki.JavaScriptExtension</className>
<guid>4e08c4f6-17bb-4ad3-9272-48b07a22e864</guid>
<property>
<cache>long</cache>
</property>
<property>
<code>(function(){

if (typeof XWiki == "undefined") {
   XWiki = new Object();
}

if (typeof XWiki.index == "undefined") {
   XWiki.index = new Object();
}

var mimetypes = {
  "image/svg"                     : { "src" : "$xwiki.getSkinFile('icons/silk/vector.png')", "alt" : "${services.localization.render('core.viewers.attachments.mime.svg')}", "title" : "${services.localization.render('core.viewers.attachments.mime.svg')}" },
  "application/svg+xml"           : { "src" : "$xwiki.getSkinFile('icons/silk/vector.png')", "alt" : "${services.localization.render('core.viewers.attachments.mime.svg')}", "title" : "${services.localization.render('core.viewers.attachments.mime.svg')}" },
  "text/plain"                    : { "src" : "$xwiki.getSkinFile('icons/silk/page_white_text.png')", "alt" : "${services.localization.render('core.viewers.attachments.mime.text')}", "title" : "${services.localization.render('core.viewers.attachments.mime.text')}"},
  "text/html"                     : { "src" : "$xwiki.getSkinFile('icons/silk/html.png')", "alt" : "${services.localization.render('core.viewers.attachments.mime.html')}", "title" : "${services.localization.render('core.viewers.attachments.mime.html')}"},
  "text/css"                      : { "src" : "$xwiki.getSkinFile('icons/silk/css.png')", "alt" : "${services.localization.render('core.viewers.attachments.mime.css')}", "title" : "${services.localization.render('core.viewers.attachments.mime.css')}" },
  "application/xml"               : { "src" : "$xwiki.getSkinFile('icons/silk/page_white_code.png')", "alt" : "${services.localization.render('core.viewers.attachments.mime.xml')}", "title" : "${services.localization.render('core.viewers.attachments.mime.xml')}" },
  "application/pdf"               : { "src" : "$xwiki.getSkinFile('icons/silk/page_white_acrobat.png')", "alt" : "${services.localization.render('core.viewers.attachments.mime.pdf')}", "title" : "${services.localization.render('core.viewers.attachments.mime.pdf')}" },
  "application/postscript"        : { "src" : "$xwiki.getSkinFile('icons/silk/page_red.png')", "alt" : "${services.localization.render('core.viewers.attachments.mime.ps')}",   "title" : "${services.localization.render('core.viewers.attachments.mime.ps')}"  },
  "application/msword"            : { "src" : "$xwiki.getSkinFile('icons/silk/page_white_word.png')", "alt" : "${services.localization.render('core.viewers.attachments.mime.document')}", "title" : "${services.localization.render('core.viewers.attachments.mime.document')}"},
  "application/powerpoint"        : { "src" : "$xwiki.getSkinFile('icons/silk/page_white_powerpoint.png')", "alt" : "${services.localization.render('core.viewers.attachments.mime.presentation')}", "title" : "${services.localization.render('core.viewers.attachments.mime.presentation')}" },
  "application/x-shockwave-flash" : { "src" : "$xwiki.getSkinFile('icons/silk/page_white_flash.png')", "alt" : "${services.localization.render('core.viewers.attachments.mime.flash')}", "title" : "${services.localization.render('core.viewers.attachments.mime.flash')}" },
  "application/x-tar"             : { "src" : "$xwiki.getSkinFile('icons/silk/page_white_compressed.png')", "alt" : "${services.localization.render('core.viewers.attachments.mime.tar')}", "title" : "${services.localization.render('core.viewers.attachments.mime.tar')}" },
  "application/zip"               : { "src" : "$xwiki.getSkinFile('icons/silk/page_white_zip.png')", "alt" : "${services.localization.render('core.viewers.attachments.mime.zip')}", "title" : "${services.localization.render('core.viewers.attachments.mime.zip')}" },
  "application/x-gzip"            : { "src" : "$xwiki.getSkinFile('icons/silk/page_white_compressed.png')", "alt" : "${services.localization.render('core.viewers.attachments.mime.gz')}", "title" : "${services.localization.render('core.viewers.attachments.mime.gz')}"  },
  "application/java-archive"      : { "src" : "$xwiki.getSkinFile('icons/silk/cup.png')", "alt" : "${services.localization.render('core.viewers.attachments.mime.jar')}", "title" : "${services.localization.render('core.viewers.attachments.mime.jar')}" }
};

/**
 * JavasScript equivalent of the #mimetype macro.
 * Returns a 20px * 20px image (as an element) corresponding to the passed mimetype.
 * First lookup if the type is in the mimetypes object above, then handles some other cases (starts/end with, etc.)
 * This function should be cleaned at the same time the mimetype images and macro are.
 */
function getMimeTypeImage(type) {
  var image = undefined;
  if (mimetypes[type]) {
    image = new Element('img',{'src':mimetypes[type].src,'alt':mimetypes[type].alt,'title':mimetypes[type].title});
  }
  else if(type.match(/^image\//)) {
    image = new Element('img', {'src':"$xwiki.getSkinFile('icons/silk/picture.png')", 'alt':"${services.localization.render('core.viewers.attachments.mime.image')}", 'title': "${services.localization.render('core.viewers.attachments.mime.image')}"});
  }
  else if(type.match(/^text\//)) {
    image = new Element('img', {'src':"$xwiki.getSkinFile('icons/silk/page_white_text.png')", 'alt':"${services.localization.render('core.viewers.attachments.mime.text')}", 'title': "${services.localization.render('core.viewers.attachments.mime.text')}"});
  }
  else if(type.match(/^audio\//)){
    image = new Element('img', {'src':"$xwiki.getSkinFile('icons/silk/music.png')", 'alt':"${services.localization.render('core.viewers.attachments.mime.audio')}", 'title': "${services.localization.render('core.viewers.attachments.mime.audio')}"});
  }
  else if(type.match(/^video\//)){
    image = new Element('img', {'src':"$xwiki.getSkinFile('icons/silk/film.png')", 'alt':"${services.localization.render('core.viewers.attachments.mime.video')}", 'title': "${services.localization.render('core.viewers.attachments.mime.video')}"});
  }
  else if(type=="application/octet-stream") {
    if (type.match(/\.xls$/)) {
      image = new Element('img', {'src':"$xwiki.getSkinFile('icons/silk/page_white_excel.png')", 'alt':"${services.localization.render('core.viewers.attachments.mime.spreadsheet')}", 'title': "${services.localization.render('core.viewers.attachments.mime.spreadsheet')}"});
    }
    else if (type.match(/\.bz$/)) {
      image = new Element('img', {'src':"$xwiki.getSkinFile('icons/silk/page_white_compressed.png')", 'alt':"${services.localization.render('core.viewers.attachments.mime.bz')}", 'title': "${services.localization.render('core.viewers.attachments.mime.bz')}"});
    }
    else if (type.match(/\.tgz$/)) {
      image = new Element('img', {'src':"$xwiki.getSkinFile('icons/silk/page_white_compressed.png')", 'alt':"${services.localization.render('core.viewers.attachments.mime.gz')}", 'title': "${services.localization.render('core.viewers.attachments.mime.gz')}"});
    }
    else if (type.match(/\.rar$/)) {
      image = new Element('img', {'src':"$xwiki.getSkinFile('icons/silk/page_white_compressed.png')", 'alt':"${services.localization.render('core.viewers.attachments.mime.rar')}", 'title': "${services.localization.render('core.viewers.attachments.mime.rar')}"});
    }
    else if (type.match(/\.(odt|odp|odf|ods|sxw|stw)$/)) {
      image = new Element('img', {'src':"$xwiki.getSkinFile('icons/silk/page.png')", 'alt':"${services.localization.render('core.viewers.attachments.mime.office')}", 'title': "${services.localization.render('core.viewers.attachments.mime.office')}"});
    }
  } 
  else if (type.match(/^application\//)) {
    image = new Element('img', {'src':"$xwiki.getSkinFile('icons/silk/cog.png')", 'alt':"${services.localization.render('core.viewers.attachments.mime.exe')}", 'title': "${services.localization.render('core.viewers.attachments.mime.exe')}"});
  }
  if (typeof image == "undefined") {
    image = new Element('img', {'src': "$xwiki.getSkinFile('icons/silk/page_white.png')", 'alt':"${services.localization.render('core.viewers.attachments.mime.attachment')}", 'title': "${services.localization.render('core.viewers.attachments.mime.attachment')}"});
  }
  image.style.width = '16px';
  image.style.height = '16px';
  return image;
}

XWiki.index.displayAttachmentEntry = function (row, i, table) {
  var inaccessibleDocs = false;
  if(row.acclev == true) {
    var fileLink = new Element('a', {'href' : row.fileurl}).update(row.filename);
    var tr = new Element('tr').update(new Element('td').update(fileLink));
    var pageLink = new Element('a', {'href' : row.url}).update(row.page);
    tr.appendChild(new Element('td', {'class' : 'pagename'}).update(pageLink));
    var spaceLink = new Element('a', {'href' : row.spaceurl}).update(row.space);
    tr.appendChild(new Element('td', {'class' : 'spacename'}).update(spaceLink));
    tr.appendChild(new Element('td').update(row.date));
    var aa = new Element('a', {'href' : row.authorurl}).update(row.authorname);
    tr.appendChild(new Element('td').update(aa));
    var type = new Element('td').update(getMimeTypeImage(row.type));
    tr.appendChild(type);

    if(row.filesize) {
       var filesizeBytes = row.filesize;
       var largeAttachment = filesizeBytes &gt; (1048576 * 3);
       
       var filesizeStr = ((filesizeBytes / 1048576).toFixed(2)) + " MB"
       
       var filesizeTd = largeAttachment ? new Element('td',{'style':'color:red;'}) : new Element('td')
       filesizeTd.update(filesizeStr);
      
       tr.appendChild(filesizeTd);
    }

    return tr;
  } else {
    var tr = new Element('tr');
    var page = row.fullname;

    var td1 = new Element('td').update("unavailable");
    var td2 = new Element('td', {'class' : 'pagename'}).update(page + "*");
    var td3 = new Element('td').update(" ");
    var td4 = new Element('td').update(" ");
    var td5 = new Element('td').update(" ");
    var td6 = new Element('td').update(" ");
    tr.appendChild(td1);
    tr.appendChild(td2);
    tr.appendChild(td3);
    tr.appendChild(td4);
    tr.appendChild(td5);
    tr.appendChild(td6);
    $('inaccessibleDocsMessage').removeClassName('hidden');
    return tr;
  }
}

})();
</code></property><property><name></name></property><property><parse>1</parse>
</property>
<property>
<use>onDemand</use>
</property>
</object>
<object>
<class>
<name>XWiki.XWikiRights</name>
<customClass></customClass>
<customMapping></customMapping>
<defaultViewSheet></defaultViewSheet>
<defaultEditSheet></defaultEditSheet>
<defaultWeb></defaultWeb>
<nameField></nameField>
<validationScript></validationScript>
<allow>
<defaultValue>1</defaultValue>
<disabled>0</disabled>
<displayFormType>select</displayFormType>
<displayType>allow</displayType>
<name>allow</name>
<number>4</number>
<prettyName>Allow/Deny</prettyName>
<unmodifiable>0</unmodifiable>
<classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
</allow>
<groups>
<cache>0</cache>
<disabled>0</disabled>
<displayType>input</displayType>
<multiSelect>1</multiSelect>
<name>groups</name>
<number>1</number>
<picker>1</picker>
<prettyName>Groups</prettyName>
<relationalStorage>0</relationalStorage>
<separator> </separator>
<size>5</size>
<unmodifiable>0</unmodifiable>
<classType>com.xpn.xwiki.objects.classes.GroupsClass</classType>
</groups>
<levels>
<cache>0</cache>
<disabled>0</disabled>
<displayType>select</displayType>
<multiSelect>1</multiSelect>
<name>levels</name>
<number>2</number>
<prettyName>Levels</prettyName>
<relationalStorage>0</relationalStorage>
<separator> </separator>
<size>3</size>
<unmodifiable>0</unmodifiable>
<classType>com.xpn.xwiki.objects.classes.LevelsClass</classType>
</levels>
<users>
<cache>0</cache>
<disabled>0</disabled>
<displayType>input</displayType>
<multiSelect>1</multiSelect>
<name>users</name>
<number>3</number>
<picker>1</picker>
<prettyName>Users</prettyName>
<relationalStorage>0</relationalStorage>
<separator> </separator>
<size>5</size>
<unmodifiable>0</unmodifiable>
<classType>com.xpn.xwiki.objects.classes.UsersClass</classType>
</users>
</class>
<name>FTPCode.AllAttachments</name>
<number>0</number>
<className>XWiki.XWikiRights</className>
<guid>91be6918-db12-4de0-9bc1-7089ffa452e7</guid>
<property>
<allow>1</allow>
</property>
<property>
<groups>XWiki.XWikiAllGroup</groups>
</property>
<property>
<levels>view</levels>
</property>
</object>
<content>{{velocity}}
#set ($discard = $xwiki.jsx.use('XWiki.AllAttachments'))
##
#set ($collist = ['filename', 'doc.name', 'date', 'space', 'author', 'type'])
#set ($colprops = {
                   'filename'  : { 'type' : 'text', 'size' : 10 },
                   'doc.name'  : { 'type' : 'text', 'size' : 10 },
                   'doc.space' : { 'type' : 'text', 'size' : 10 },
                   'date'      : { 'type' : 'date', 'size' : 10, 'filterable' : false },
                   'author'    : { 'type' : 'text', 'size' : 10 },
                   'type'      : { 'sortable' : false }
                 })
#set($options = { 'url' : $xwiki.getURL('XWiki.AllAttachmentsResults', 'get', 'xpage=plain&amp;outputSyntax=plain'),
                  'callback' : 'XWiki.index.displayAttachmentEntry',
                  'translationPrefix' : 'platform.index.attachments.' })
#livetable('allattachments' $collist $colprops $options)

(% id="inaccessibleDocsMessage" class="hidden" %)
(((
{{info}}$services.localization.render('rightsmanager.documentrequireviewrights'){{/info}}
)))
{{/velocity}}</content></xwikidoc>
